# -*- coding: utf-8 -*-
"""hw1_SouradipPal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DtZIT-UY2V8oCfgydDEPuOri8wBKeAyG

HW1 (ECE 60146)  \\
Name: Souradip Pal \\
PUID: 0034772329
"""

# Task 1: Creating a Sequence class
class Sequence(object):
    def __init__(self, array):
        self.array = array
        self.index = -1
    
    # Task 4: Modification to use Sequence instance as an iterator
    def __iter__(self):
        return self
    
    def __next__(self):
        self.index += 1
        if self.index < len(self.array):
            return self.array[self.index]
        else:
            raise StopIteration
    next = __next__

    def __len__(self):
        return len(self.array)

    # Task 6: Modification in Sequence class to compare two Sequence instances 
    # of same length using > operator
    def __gt__(self, other):
        if len(self.array) == len(other.array):
            gt = [x > other.array[i] for i,x in enumerate(self.array)]
            return gt.count(True)
        else:
            raise ValueError('Two arrays are not equal in length!')

# Task 2: Extending the Sequence class into the Fibonacci subclass
class Fibonacci(Sequence):
    def __init__(self, first_value, second_value):
        super(Fibonacci, self).__init__([first_value, second_value])

    # Task 3: Making the Fibonacci class instances callable
    def __call__(self, length):
        if not length is None and length >= 2:
            for i in range(length - 2):
                self.array.append(self.array[-1]+self.array[-2])  
        else:
            raise ValueError('Invalid length.')
        return self.array

FS = Fibonacci(1, 2)
FS(length = 5)

print(len(FS))

print([n for n in FS])

# Task 5: Extending the Sequence class into the Prime subclass
class Prime(Sequence):
    def __init__(self):
        super(Prime, self).__init__([])

    # Task 5: Making the Prime class instances callable
    def __call__(self, length):
        self.__init__()
        if not length is None:
            if length == 1:
                self.array.append(2)
            
            if length == 2:
                self.array.append(2)
                self.array.append(3)

            if length > 2:
                self.array.append(2)
                self.array.append(3)
                n = 5
                while len(self.array) < length:
                    if not any([n % x == 0 for x in self.array]): 
                        self.array.append(n)
                    n+=1;
        else:
            raise ValueError('Invalid length.')

        return self.array

PS = Prime()

PS(length = 12)

print(len(PS))

print([n for n in PS])

FS = Fibonacci(first_value=1, second_value=2)
FS(length=8)

PS = Prime()
PS(length=8)

print(FS > PS)

PS(length=5)

print(FS > PS)

